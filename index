<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Term Quiz Bonus Multiplier</title>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;600;700&family=Crimson+Text:wght@400;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);
            min-height: 100vh;
            font-family: 'Crimson Text', serif;
            color: #e8d5b7;
            overflow-x: hidden;
            position: relative;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="25" cy="25" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="75" cy="25" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="50" cy="50" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="25" cy="75" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23ffffff" opacity="0.1"/></svg>') repeat;
            pointer-events: none;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 20px;
            position: relative;
            z-index: 1;
        }

        .title {
            font-family: 'Cinzel', serif;
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 3rem;
            color: #d4af37;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
            letter-spacing: 2px;
            background: linear-gradient(45deg, #d4af37, #ffd700, #d4af37);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .dice-container {
            position: relative;
            margin-bottom: 2rem;
        }

        .dice {
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #8B4513 0%, #A0522D 50%, #8B4513 100%);
            border-radius: 15px;
            border: 3px solid #d4af37;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            font-weight: bold;
            color: #e8d5b7;
            box-shadow: 
                0 0 20px rgba(212, 175, 55, 0.3),
                inset 0 0 20px rgba(255, 255, 255, 0.1),
                0 8px 32px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .dice::before {
            content: '';
            position: absolute;
            top: 10%;
            left: 10%;
            width: 30%;
            height: 30%;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            filter: blur(10px);
        }

        .dice:hover {
            transform: translateY(-2px);
            box-shadow: 
                0 0 30px rgba(212, 175, 55, 0.5),
                inset 0 0 20px rgba(255, 255, 255, 0.1),
                0 12px 40px rgba(0, 0, 0, 0.4);
        }

        .dice.rolling {
            animation: 
                diceRectangleRoll 3s cubic-bezier(0.25, 0.46, 0.45, 0.94),
                diceShake 0.1s ease-in-out 0s 30,
                diceBlur 3s ease-in-out;
        }

        .dice.countdown {
            animation: countdownPulse 1s ease-in-out;
        }

        @keyframes diceRectangleRoll {
            0% { 
                transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale(1) translateX(0px) translateY(0px); 
            }
            10% { 
                transform: rotateX(90deg) rotateY(45deg) rotateZ(90deg) scale(1.1) translateX(60px) translateY(-30px); 
            }
            20% { 
                transform: rotateX(180deg) rotateY(90deg) rotateZ(180deg) scale(0.9) translateX(80px) translateY(-60px); 
            }
            30% { 
                transform: rotateX(270deg) rotateY(135deg) rotateZ(270deg) scale(1.2) translateX(60px) translateY(-80px); 
            }
            40% { 
                transform: rotateX(360deg) rotateY(180deg) rotateZ(360deg) scale(0.8) translateX(-20px) translateY(-80px); 
            }
            50% { 
                transform: rotateX(450deg) rotateY(225deg) rotateZ(450deg) scale(1.1) translateX(-80px) translateY(-60px); 
            }
            60% { 
                transform: rotateX(540deg) rotateY(270deg) rotateZ(540deg) scale(0.9) translateX(-80px) translateY(-20px); 
            }
            70% { 
                transform: rotateX(630deg) rotateY(315deg) rotateZ(630deg) scale(1.15) translateX(-60px) translateY(20px); 
            }
            80% { 
                transform: rotateX(720deg) rotateY(360deg) rotateZ(720deg) scale(0.95) translateX(-20px) translateY(40px); 
            }
            90% { 
                transform: rotateX(810deg) rotateY(405deg) rotateZ(810deg) scale(1.05) translateX(40px) translateY(20px); 
            }
            100% { 
                transform: rotateX(900deg) rotateY(450deg) rotateZ(900deg) scale(1) translateX(0px) translateY(0px); 
            }
        }

        @keyframes diceShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-3px) rotateZ(-2deg); }
            75% { transform: translateX(3px) rotateZ(2deg); }
        }

        @keyframes diceBlur {
            0% { filter: blur(0px); }
            20% { filter: blur(4px); }
            80% { filter: blur(4px); }
            100% { filter: blur(0px); }
        }

        @keyframes countdownPulse {
            0% { 
                transform: scale(1); 
                box-shadow: 0 0 20px rgba(212, 175, 55, 0.3);
            }
            50% { 
                transform: scale(1.2); 
                box-shadow: 0 0 50px rgba(255, 107, 107, 0.8);
            }
            100% { 
                transform: scale(1); 
                box-shadow: 0 0 20px rgba(212, 175, 55, 0.3);
            }
        }

        .countdown-number {
            font-size: 4rem !important;
            color: #ff6b6b !important;
            text-shadow: 0 0 20px rgba(255, 107, 107, 0.8) !important;
            animation: numberPulse 0.8s ease-in-out;
        }

        @keyframes numberPulse {
            0% { 
                transform: scale(0.5);
                opacity: 0;
            }
            50% { 
                transform: scale(1.2);
                opacity: 1;
            }
            100% { 
                transform: scale(1);
                opacity: 1;
            }
        }

        .roll-button {
            background: linear-gradient(135deg, #8B4513 0%, #A0522D 50%, #8B4513 100%);
            border: 2px solid #d4af37;
            border-radius: 8px;
            color: #e8d5b7;
            font-family: 'Cinzel', serif;
            font-size: 1.2rem;
            font-weight: 600;
            padding: 12px 24px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 
                0 4px 15px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 2rem;
        }

        .roll-button:hover {
            background: linear-gradient(135deg, #A0522D 0%, #CD853F 50%, #A0522D 100%);
            box-shadow: 
                0 6px 20px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.3),
                0 0 20px rgba(212, 175, 55, 0.3);
            transform: translateY(-2px);
        }

        .roll-button:active {
            transform: translateY(0);
            box-shadow: 
                0 2px 8px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
        }

        .roll-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .result {
            font-size: 1.8rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 2rem;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #d4af37;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
        }

        .result.animate {
            animation: resultGlow 1s ease-in-out;
        }

        @keyframes resultGlow {
            0% { opacity: 0; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }

        .multiplier {
            color: #32CD32;
            text-shadow: 0 0 10px rgba(50, 205, 50, 0.5);
        }

        .d20-display {
            margin-top: 2rem;
            text-align: center;
        }

        .d20-static {
            width: 100px;
            height: 100px;
            margin: 0 auto 1rem;
            background: linear-gradient(135deg, #2F4F4F 0%, #708090 50%, #2F4F4F 100%);
            clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
            border: 2px solid #d4af37;
            box-shadow: 
                0 4px 15px rgba(0, 0, 0, 0.3),
                inset 0 0 20px rgba(255, 255, 255, 0.1);
            position: relative;
            transform-style: preserve-3d;
        }

        .d20-static::before {
            content: 'd20';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #e8d5b7;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .probabilities {
            background: rgba(30, 30, 60, 0.7);
            border: 1px solid #d4af37;
            border-radius: 10px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .probabilities h3 {
            font-family: 'Cinzel', serif;
            color: #d4af37;
            margin-bottom: 1rem;
            text-align: center;
            font-size: 1.3rem;
        }

        .prob-list {
            list-style: none;
            font-size: 1rem;
            line-height: 1.6;
        }

        .prob-list li {
            display: flex;
            justify-content: space-between;
            padding: 0.3rem 0;
            border-bottom: 1px solid rgba(212, 175, 55, 0.2);
        }

        .prob-list li:last-child {
            border-bottom: none;
        }

        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #d4af37;
            border-radius: 50%;
            opacity: 0;
            animation: particle 3s ease-out infinite;
        }

        @keyframes particle {
            0% {
                opacity: 1;
                transform: translateY(0) rotate(0deg);
            }
            100% {
                opacity: 0;
                transform: translateY(-100px) rotate(360deg);
            }
        }

        .glow {
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from {
                box-shadow: 
                    0 0 20px rgba(212, 175, 55, 0.3),
                    inset 0 0 20px rgba(255, 255, 255, 0.1),
                    0 8px 32px rgba(0, 0, 0, 0.3);
            }
            to {
                box-shadow: 
                    0 0 30px rgba(212, 175, 55, 0.6),
                    inset 0 0 20px rgba(255, 255, 255, 0.2),
                    0 8px 40px rgba(0, 0, 0, 0.4);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">Term Quiz Bonus Multiplier</h1>
        
        <div class="dice-container">
            <div class="dice" id="dice">
                <span id="diceNumber">?</span>
            </div>
            <div class="particles" id="particles"></div>
        </div>
        
        <button class="roll-button" id="rollButton" onclick="rollDice()">Let's Roll the Dice!</button>
        
        <div class="result" id="result"></div>
        
        <div class="d20-display">
            <div class="d20-static"></div>
            <div class="probabilities">
                <h3>Bonus Multipliers Available</h3>
                <p style="text-align: center; font-size: 1.1rem; color: #32CD32; text-shadow: 0 0 10px rgba(50, 205, 50, 0.5); margin-bottom: 1.5rem;">
                    🎲 You can get up to ×5 bonus! 🎲
                </p>
                <ul class="prob-list">
                    <li><span>×0 (No Bonus)</span><span>13/20 (65%)</span></li>
                    <li><span>×2 Multiplier</span><span>3/20 (15%)</span></li>
                    <li><span>×3 Multiplier</span><span>2/20 (10%)</span></li>
                    <li><span>×4 Multiplier</span><span>1/20 (5%)</span></li>
                    <li><span>×5 Multiplier</span><span>1/20 (5%)</span></li>
                </ul>
            </div>
        </div>
    </div>

    <script>
        // Audio context for sound effects
        let audioContext;
        
        function initAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                // Resume audio context if it's suspended (required by some browsers)
                if (audioContext.state === 'suspended') {
                    audioContext.resume();
                }
            } catch (error) {
                console.log('Audio not supported:', error);
                audioContext = null;
            }
        }

        function createDiceRollSound() {
            if (!audioContext) return;
            
            // Create multiple impact sounds for dice bouncing
            for (let i = 0; i < 8; i++) {
                setTimeout(() => {
                    createImpactSound(0.3 - (i * 0.02)); // Decreasing volume
                }, i * 300 + Math.random() * 200);
            }
            
            // Add rolling rattle sounds
            for (let i = 0; i < 15; i++) {
                setTimeout(() => {
                    createRattleSound(0.15);
                }, i * 150 + Math.random() * 100);
            }
        }

        function createImpactSound(volume = 0.3) {
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                const filterNode = audioContext.createBiquadFilter();
                
                oscillator.connect(filterNode);
                filterNode.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                // Create a thud/impact sound
                oscillator.frequency.setValueAtTime(120 + Math.random() * 80, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(60, audioContext.currentTime + 0.1);
                
                filterNode.type = 'lowpass';
                filterNode.frequency.setValueAtTime(800, audioContext.currentTime);
                
                gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.15);
                
                oscillator.type = 'sawtooth';
                
                const startTime = audioContext.currentTime;
                const stopTime = startTime + 0.15;
                
                oscillator.start(startTime);
                oscillator.stop(stopTime);
            } catch (error) {
                console.log('Audio error:', error);
            }
        }

        function createRattleSound(volume = 0.15) {
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                const filterNode = audioContext.createBiquadFilter();
                
                oscillator.connect(filterNode);
                filterNode.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                // Create a rattle/rolling sound
                oscillator.frequency.setValueAtTime(200 + Math.random() * 400, audioContext.currentTime);
                
                filterNode.type = 'highpass';
                filterNode.frequency.setValueAtTime(300, audioContext.currentTime);
                
                gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.05);
                
                oscillator.type = 'square';
                
                const startTime = audioContext.currentTime;
                const stopTime = startTime + 0.05;
                
                oscillator.start(startTime);
                oscillator.stop(stopTime);
            } catch (error) {
                console.log('Audio error:', error);
            }
        }

        function createCountdownSound() {
            try {
                if (!audioContext) return;
                
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(600, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
                
                oscillator.type = 'sine';
                
                const startTime = audioContext.currentTime;
                const stopTime = startTime + 0.1;
                
                oscillator.start(startTime);
                oscillator.stop(stopTime);
            } catch (error) {
                console.log('Audio error:', error);
            }
        }

        function createRevealSound(isBonus = false) {
            try {
                if (!audioContext) return;
                
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                const startTime = audioContext.currentTime;
                let stopTime;
                
                if (isBonus) {
                    // Victory sound for bonus
                    oscillator.frequency.setValueAtTime(400, startTime);
                    oscillator.frequency.exponentialRampToValueAtTime(800, startTime + 0.3);
                    gainNode.gain.setValueAtTime(0.3, startTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.5);
                    stopTime = startTime + 0.5;
                } else {
                    // Neutral sound for no bonus
                    oscillator.frequency.setValueAtTime(300, startTime);
                    oscillator.frequency.exponentialRampToValueAtTime(250, startTime + 0.2);
                    gainNode.gain.setValueAtTime(0.2, startTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + 0.3);
                    stopTime = startTime + 0.3;
                }
                
                oscillator.type = 'triangle';
                oscillator.start(startTime);
                oscillator.stop(stopTime);
            } catch (error) {
                console.log('Audio error:', error);
            }
        }

        // Define the weighted outcomes for the d20
        const outcomes = [
            // 13 faces with no multiplier (faces 1-13)
            ...Array(13).fill(null).map((_, i) => ({ face: i + 1, multiplier: null })),
            // 3 faces with x2 multiplier (faces 14-16)
            ...Array(3).fill(null).map((_, i) => ({ face: i + 14, multiplier: 2 })),
            // 2 faces with x3 multiplier (faces 17-18)
            ...Array(2).fill(null).map((_, i) => ({ face: i + 17, multiplier: 3 })),
            // 1 face with x4 multiplier (face 19)
            { face: 19, multiplier: 4 },
            // 1 face with x5 multiplier (face 20)
            { face: 20, multiplier: 5 }
        ];

        function createParticles() {
            const particles = document.getElementById('particles');
            particles.innerHTML = '';
            
            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 2 + 's';
                particle.style.animationDuration = (2 + Math.random() * 2) + 's';
                particles.appendChild(particle);
            }
        }

        function rollDice() {
            const dice = document.getElementById('dice');
            const diceNumber = document.getElementById('diceNumber');
            const result = document.getElementById('result');
            const rollButton = document.getElementById('rollButton');

            // Initialize audio context on first interaction
            initAudio();

            // Disable button during roll
            rollButton.disabled = true;
            
            // Clear previous result
            result.textContent = '';
            result.classList.remove('animate');
            
            // Start rolling animation and sound
            dice.classList.add('rolling', 'glow');
            diceNumber.textContent = '?';
            
            // Play dice rolling sound
            createDiceRollSound();
            
            // Create particle effect
            createParticles();
            
            // Simulate rolling by showing random multipliers
            let rollCount = 0;
            const rollInterval = setInterval(() => {
                const randomOutcome = outcomes[Math.floor(Math.random() * outcomes.length)];
                if (randomOutcome.multiplier) {
                    diceNumber.textContent = '×' + randomOutcome.multiplier;
                } else {
                    diceNumber.textContent = '×0';
                }
                rollCount++;
                
                if (rollCount > 25) {
                    clearInterval(rollInterval);
                    
                    // Get final result
                    const randomIndex = Math.floor(Math.random() * outcomes.length);
                    const outcome = outcomes[randomIndex];
                    
                    // Stop rolling animation and start countdown
                    dice.classList.remove('rolling');
                    diceNumber.textContent = '?';
                    
                    // Start countdown sequence
                    startCountdown(dice, diceNumber, result, rollButton, outcome);
                }
            }, 120);
        }

        function startCountdown(dice, diceNumber, result, rollButton, outcome) {
            let count = 3;
            dice.classList.add('countdown');
            
            const countdownInterval = setInterval(() => {
                diceNumber.textContent = count;
                diceNumber.className = 'countdown-number';
                
                // Play countdown sound
                createCountdownSound();
                
                count--;
                
                if (count < 0) {
                    clearInterval(countdownInterval);
                    
                    // Reset dice styling
                    diceNumber.className = '';
                    dice.classList.remove('countdown', 'glow');
                    
                    // Show final result on dice
                    if (outcome.multiplier) {
                        diceNumber.textContent = '×' + outcome.multiplier;
                    } else {
                        diceNumber.textContent = '×0';
                    }
                    
                    // Play reveal sound
                    createRevealSound(outcome.multiplier > 0);
                    
                    // Show result text
                    let resultText;
                    if (outcome.multiplier) {
                        resultText = `Your multiplier is <span class="multiplier">×${outcome.multiplier}</span>! 🎉 BONUS ACTIVATED!`;
                    } else {
                        resultText = 'Your multiplier is ×0. No bonus this time!';
                    }
                    
                    result.innerHTML = resultText;
                    result.classList.add('animate');
                    
                    // Re-enable button
                    rollButton.disabled = false;
                }
            }, 800);
        }

        // Add some ambient glow effect
        setInterval(() => {
            const dice = document.getElementById('dice');
            if (!dice.classList.contains('rolling')) {
                dice.classList.add('glow');
                setTimeout(() => {
                    dice.classList.remove('glow');
                }, 2000);
            }
        }, 8000);
    </script>
</body>
</html>
